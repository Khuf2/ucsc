
import java.util.Scanner;

public class Methods {
    Scanner input = new Scanner(System.in);
    Scanner num = new Scanner(System.in);
    int personCount = 0;

    public Methods(){}

    public void newLine() {
        System.out.println("\n");
    }

    public void delay(int d) {
        try
        {
            Thread.sleep(d);
        }
        catch(InterruptedException ex)
        {
            Thread.currentThread().interrupt();
        }
    }

    public Person makePerson() {
        personCount++;
        System.out.print("What is user" + personCount + "'s name? :: ");
        String name = input.nextLine();
        if(name.equalsIgnoreCase("Kermit")) {
            Person Kermit = new Kermit("Kermit", 300, 20, 100, 50, 4);
            System.out.println("Kermit initialized for user" + personCount + ".");
            return Kermit;
        } else if(name.equalsIgnoreCase("Jarritos")) {
            Person Jarritos = new Jarritos("Jarritos", 150, 30, 300, 50, 2);
            System.out.println("Jarritos initialized for user" + personCount + ".");
            return Jarritos;
        } else if(name.equalsIgnoreCase("Dave and Buster")) {
            Person DaveAndBuster = new DaveAndBuster("Dave and Buster", 250, 40, 150, 20, 6);
            System.out.println("Dave and Buster initialized for user" + personCount + ".");
            return DaveAndBuster;
        } else if(name.equalsIgnoreCase("Shaq")) {
            Person Shaq = new Shaq("Shaq", 50, 20, 500, 100, 1);
            System.out.println("Shaq initialized for user" + personCount + ".");
            return Shaq;
        } else if(name.equalsIgnoreCase("Wario")) {
            Person Wario = new Wario("Wario", 120, 30, 250, 60, 3);
            System.out.println("Wario initialized for user" + personCount + ".");
            return Wario;
        } else if(name.equalsIgnoreCase("Captain K'nuckles")) {
            Person Captain = new Captain("Captain K'nuckles", 100, 100, 150, 40, 8);
            System.out.println("Captain K'nuckles initialized for user" + personCount + ".");
            return Captain;
        }
        System.out.print("What is " + name + "'s attack range? :: ");
        int range = num.nextInt();
        System.out.print("What is " + name + "'s speed? :: ");
        int speed = num.nextInt();
        System.out.print("What is " + name + "'s health? :: ");
        int health = num.nextInt();
        System.out.print("What is " + name + "'s power? :: ");
        int power = num.nextInt();
        System.out.print("What is " + name + "'s priority? :: ");
        int priority = num.nextInt();
        Person entity = new Custom(name, range, speed, health, power, priority);
        return entity;
    }

    public Enemy makeEnemy(String name) {
        Enemy enemy;
        if(name.equals("Bummy Ass Nigga")) {
            enemy = new Bum("Bummy Ass Nigga", 20, 70, 120, 30, 3, 1, 1);
        } else {
            enemy = new Bum("Failure", 1, 1, 1, 1, 9, 99, 99);
        }
        return enemy;
    }

    public void profile(Person a, Enemy b) {
        this.delay(1000);
        // "Name: will always be 7 to 26 chars
        // We always want at least 10 chars in Name: m
        // integer of 6 + name.length()
        // "Range: will always have 7 to 10 chars
        String rangeString = "\nRange: " + a.attack_range;
        String speedString = "\nSpeed: " + a.speed;
        String powerString = "\nPower: " + a.power;
        String healthString = "\nHealth: " + a.health;
        String priorityString = "\nPriority: " + a.priority;
        int nameStringLength = 6 + a.name.length();
        int rangeStringLength = a.name.length() - (String.valueOf(a.attack_range).length()+1);
        int speedStringLength = a.name.length() - (String.valueOf(a.speed).length()+1);
        int powerStringLength = a.name.length() - (String.valueOf(a.power).length()+1);
        int healthStringLength = a.name.length() - (String.valueOf(a.health).length()+2);
        int priorityStringLength = a.name.length() - (String.valueOf(a.priority).length()+4);
        for(int i = 0; i < rangeStringLength; i++) {
            rangeString += " ";
        }
        for(int i = 0; i < speedStringLength; i++) {
            speedString += " ";
        }
        for(int i = 0; i < powerStringLength; i++) {
            powerString += " ";
        }
        for(int i = 0; i < healthStringLength; i++) {
            healthString += " ";
        }
        for(int i = 0; i < priorityStringLength; i++) {
            priorityString += " ";
        }
        System.out.println("\nName: " + a.name +  "\t\tEnemy Name: " + b.name + rangeString + "\t\tEnemy Range: " + b.attack_range + speedString
                + "\t\tEnemy Speed: " + b.speed + healthString + "\t\tEnemy Health: " + b.health + powerString + "\t\tEnemy Power: " + b.power + priorityString + "\t\tEnemy Priority: " + b.priority + "\n");

    }

    public void battle(Person person, Enemy enemy) {
        // Sets starting distance for battle
        this.profile(person,enemy);
        int distance;
        if(person.getAttackRange()>enemy.getAttackRange()) {
            distance = person.getAttackRange();
        } else {
            distance = enemy.getAttackRange();
        }

        // Declares combatants and distance
        this.delay(1000);
        System.out.println(person.getName() + " has encountered " + enemy.getName() + " at " + distance + " units away!\n");
        this.delay(1000);

        // Menu window

        System.out.println("*********************************************************************************************************************************");
        boolean flee = false;
        while(person.isAlive()==true && enemy.isAlive()==true && !flee) {
            this.delay(1000);
            if(distance < 0) {
                distance = 0;
            }

            // Distance visualizer
            int hashes = distance / 20;
            System.out.print("0");
            for(int i = 0; i<hashes; i++) {
                System.out.print(" - ");
            }
            System.out.println("0");

            // Display battle stats before next move
            person.getBattleStats();
            enemy.getBattleStats();
            this.newLine();
            // Input interface
            System.out.println("Distance: " + distance);
            System.out.print("a) Attack b) Move? c) Skill d) Flee e) Stats:: ");
            String response = input.next();

            // Attack

            if(response.equalsIgnoreCase("a")) {
                if(person.getPriority()>=enemy.getPriority()) {
                    if (person.getAttack_range() >= distance) {
                        this.newLine();
                        person.attack(enemy);
                    } else {
                        this.delay(1000);
                        System.out.println("\nThe attack failed.");
                    }
                    if(enemy.isAlive()==true) {
                        if (enemy.getAttackRange() >= distance) {
                            enemy.attack(person);
                        } else {
                            distance = enemy.move(distance);
                        }
                    }
                    System.out.println("*********************************************************************************************************************************");
                }else if (enemy.getPriority() > person.getPriority()) {
                    if (enemy.getAttackRange() >= distance) {
                        this.newLine();
                        enemy.attack(person);
                    } else {
                        distance = enemy.move(distance);
                    }
                    if(person.isAlive()==true) {
                        if (person.getAttack_range() >= distance) {
                            person.attack(enemy);
                            System.out.println("*********************************************************************************************************************************");
                        } else {
                            this.delay(1000);
                            System.out.println("The attack failed.");
                            System.out.println("*********************************************************************************************************************************");
                        }
                    }
                }

                // Move

            } else if (response.equalsIgnoreCase("b")) {
                if (person.getPriority() >= enemy.getPriority()) {
                    distance = person.move(distance);
                    if (enemy.getAttackRange() >= distance) {
                        enemy.attack(person);
                        System.out.println("*********************************************************************************************************************************");
                    } else {
                        distance = enemy.move(distance);
                        System.out.println("*********************************************************************************************************************************");
                    }
                } else if(enemy.getPriority() > person.getPriority()) {
                    if (enemy.getAttackRange() >= distance) {
                        this.newLine();
                        enemy.attack(person);
                    } else {
                        distance = enemy.move(distance);
                    }
                    if(person.isAlive()==true) {
                        distance = person.move(distance);
                    }
                    System.out.println("*********************************************************************************************************************************");
                }
            } else if(response.equalsIgnoreCase("e")) {
                this.profile(person, enemy);
            } else if(response.equalsIgnoreCase("d")) {
                flee = person.flee(enemy);
            }
        }
    }
}
